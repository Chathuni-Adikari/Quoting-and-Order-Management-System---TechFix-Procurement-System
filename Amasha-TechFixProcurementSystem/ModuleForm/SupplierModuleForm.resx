<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBoxClose.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>